import React, { useState, useMemo } from "react";
import { type IAMFinding } from "../types/iam";
import ResultsList from "./ResultsList";

interface Props {
  findings: IAMFinding[];
  onClear: () => void;
}

const VulnerabilityResults: React.FC<Props> = ({ findings, onClear }) => {
  const [searchTerm, setSearchTerm] = useState("");

  const filteredFindings = useMemo(() => {
    if (!searchTerm) return findings;
    const lowerSearch = searchTerm.toLowerCase();
    return findings.filter(
      (finding) =>
        finding["Issue Name"]?.toLowerCase().includes(lowerSearch) ||
        finding["Identity Name"]?.toLowerCase().includes(lowerSearch)
    );
  }, [findings, searchTerm]);

  const renderFinding = (finding: IAMFinding) => (
    <div className="border-l-4 border-aws-orange pl-4">
      <div className="flex justify-between items-start mb-4">
        <div>
          <h3 className="text-lg font-semibold text-aws-blue">
            {finding["Issue Name"]}
          </h3>
          <p className="text-sm text-gray-600">
            Found on {finding["Time Issue Found"]}
          </p>
        </div>
        <span className="text-sm font-medium text-aws-orange">
          {finding["Identity Name"]}
        </span>
      </div>
      <div className="grid gap-3">
        {Object.entries(finding)
          .filter(
            ([key]) =>
              !["Time Issue Found", "Identity Name", "Issue Name"].includes(key)
          )
          .map(([key, val]) => (
            <div key={key} className="flex gap-2">
              <span className="text-sm font-medium text-gray-700">{key}:</span>
              <span className="text-sm text-gray-600">{val}</span>
            </div>
          ))}
      </div>
    </div>
  );

  return (
    <ResultsList
      title="Vulnerabilities Found"
      items={filteredFindings}
      renderItem={renderFinding}
      searchValue={searchTerm}
      onSearchChange={setSearchTerm}
      onClear={onClear}
      emptyMessage="No vulnerabilities found yet. Click 'Run Vulnerability Scan'."
      searchPlaceholder="Search by vulnerability or identity name..."
    />
  );
};

export default VulnerabilityResults;
